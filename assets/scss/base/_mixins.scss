// MIXINS

// Font size to rem
@mixin font ($size) {
  font-size: $size + px;
  font-size: ($size/$font-size) + rem;
}
// FUNCTIONS
@function rem($val) {
  @return #{$val / $font-size}rem;
}

@mixin icon($name, $color: $black, $size: contain) {
  background-repeat: no-repeat;
  background-position: center;
  background-size: $size;
  background-image: svg-load('../svg/#{$name}-icon.svg', fill=$color);
}

// Placeholder style
//@mixin optional-at-root($sel) {
//  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
//    @content;
//  }
//}
//@mixin placeholder {
//  @include optional-at-root ('::-webkit-input-placeholder') {
//    @content;
//  }
//  @include optional-at-root (':-moz-placeholder') {
//    @content;
//  }
//  @include optional-at-root ('::-moz-placeholder') {
//    @content;
//  }
//  @include optional-at-root (':-ms-input-placeholder') {
//    @content;
//  }
//}

// Standart svg-load background style
@mixin standart-bg() {
  background-size: contain;
  background-position: center;
  background-repeat: no-repeat;
}

// Response
//@mixin respond-to($media, $type: 'max') {
//  @if $type == 'max' {
//    @media only screen and (max-width: $media) {
//      @content;
//    }
//  }
//
//  @if $type == 'min' {
//    @media only screen and (min-width: $media) {
//      @content;
//    }
//  }
//}
// Pixels to vw
@function vw($val) {
  @return #{$val / $body-width * 100}vw;
}
// Pixels to vh
@function vh($val) {
  @return #{$val / $body-height * 100}vh;
}

$col-width: 72;
$col-indent: 16;

@function col($count, $all) {
  @return #{($count * $col-width + ($count - 1) * $col-indent) / (($col-width + $col-indent) * $all - $col-indent) * 100%};
}

$mob-col-width: 55;
$mob-col-indent: 20;

@function colMob($count, $all) {
  @return #{($count * $mob-col-width + ($count - 1) * $mob-col-indent) / (($mob-col-width + $mob-col-indent) * $all - $mob-col-indent) * 100%};
}

